{
  "React TS useState": {
    "prefix": "us",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState<${2}>(${3});"
    ],
    "description": "React's useState with TypeScript syntax"
  },
  "React TS useEffect": {
    "prefix": "ue",
    "body": ["useEffect(() => {${1}}, []);"],
    "description": "React's useEffect with TypeScript syntax"
  },
  "React TS new functional component": {
    "prefix": "rnfc",
    "body": ["const ${1} = () => {};", "", "export default ${1};"],
    "description": "React's useState with TypeScript syntax"
  },
  "Jest new file": {
    "prefix": "jnf",
    "body": ["describe('${1}', () => {", "  test('${2}', () => {});", "});"],
    "description": "Jest new test file with describe and empty test"
  },
  "Jest new test": {
    "prefix": "jnt",
    "body": ["test('${1}', () => {});"],
    "description": "Jest new test function with describe and empty test"
  },
  "Jest new async test": {
    "prefix": "jnat",
    "body": ["test('${1}', async () => {});"],
    "description": "Jest new async test function with describe and empty test"
  },
  "Express TS new async RequestHandler": {
    "prefix": "enr",
    "body": [
      "export const ${1}: RequestHandler = async (req, res, next) => {};"
    ],
    "description": "Express new async RequestHandler method with TypeScript syntax"
  },
  "New arrow function": {
    "prefix": "naf",
    "body": ["const ${1} = () => {};"],
    "description": "New arrow function"
  },
  "New async arrow function": {
    "prefix": "naaf",
    "body": ["const ${1} = async () => {};"],
    "description": "New async arrow function"
  },
  "New arrow function with export": {
    "prefix": "enaf",
    "body": ["export const ${1} = () => {};"],
    "description": "New arrow function with export"
  },
  "New async arrow function with export": {
    "prefix": "enaaf",
    "body": ["export const ${1} = async () => {};"],
    "description": "New async arrow function with export"
  },
  "New styled component": {
    "prefix": "nsc",
    "body": ["export const ${1} = styled(${2})`", "  ${3}", "`;"],
    "description": "New async arrow function"
  },
  "RTK new reducer": {
    "prefix": "rnr",
    "body": ["${1}: (state, action: PayloadAction<${2}>) => {${3}},"],
    "description": "Redux toolkit new reducer"
  },
  "Use dispatch": {
    "prefix": "disp",
    "body": ["const dispatch = useAppDispatch();"],
    "description": "Use dispatch hook"
  }
}
